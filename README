This is a reference implementation of the Journal, Audit, and Logging Protocol (JALoP).

The implementation is divided into a number of components:
  The JALoP Network Library (JNL)
  The JALoP Producer Library (JPL)
  JALoP Local Store
  JALoP Network Stores

This project makes use of the following libraries:
  lcov - http://ltp.sourceforge.net/coverage/lcov.php
  libaxl - http://www.aspl.es/xml
  libconfig - http://freshmeat.net/projects/libconfigduo
  libuuid - http://e2fsprogs.sourceforge.net/
  libvortex - http://www.aspl.es/fact/files/af-arch/vortex/html/
  libxml2 - http://xmlsoft.org/
  libxmlsec1 - http://www.aleksey.com/xmlsec/
  openssl - http://www.openssl.org/
  site_scons - http://scons.org/
  test-dept - http://code.google.com/p/test-dept/
  vortex - http://www.aspl.es/vortex
  Berkeley DB - http://www.oracle.com/us/products/database/berkeley-db/overview/index.html

The following libraries are included in the 3rd-party directory:
  axl
  lcov
  libconfig
  site_scons
  vortex

Building and Installing

This project uses the scons (www.scons.org) build tool, version 2.0.1, and will
compile under python 2.4 or 2.6.

Later versions of Python should work as well, but were not tested.
To build, simply run 'scons' within the top level directory:

$ scons

This generates debug, and release directories.

To install the library, simply run the appropriate installation script for your
platform (i.e., rhel_x86, rhel_x86_64, or solaris):

$ install_<platform>.sh


Other Options (these steps do not need to be executed in order to use the JALoP libraries)
To build the library and execute the unit tests, run

$ scons tests

To generate code coverage reports, run

$ scons cov

code coverage reports will appear in the 'cov' directory in the root of the source tree.

To generate doxygen documentation, run
$ scons doc
The generated documents will appear in the directory doc/doxygen.out

To clean the build output you can simply run
$ scons -c

Scons accepts a '-j' argument for parallel builds, so

$ scons -j6 
will run 6 worker threads in parallel.


The build environment honors a number of variables, these are:
CFLAGS - a set of flags to use when compiling C source files. To enable flags
for both C and C++, use the CCFLAGS environment variable.
CCFLAGS - a set of flags to use when compiling C and C++ source files.
CXXFLAGS - a set of flags to use when compiling C++ source fils.
LDFLAGS - a set of flags to pass to the linker
CC The C compiler to use
CXX The C++ compiler to use
LD The linker to use
CPP The C preprocessor to use


All of the source code for the implementation is under the 'src' directory.
The src directory is divided into different sections based on functionality,
subdirs such as network_lib, local_store, etc.

A number of patches for external project are included. These patches modify
existing projects (e.g. log4cxx) to utilize JALoP as an output method. These
may be found under the 'patches' directory.

This project is built and tested in the following environments:
  RedHat Enterprise Linux (RHEL) 5 on x86_64, using gcc version 4.1.2
  RHEL 6 on x86_64, using gcc version 4.4.5
  RHEL 6 on i386, using gcc version 4.4.5
  Solaris 10 TX 09/10 on i386, using gcc version 3.4.3

Additional Notes for Solaris (See README-Solaris for more information)
This project requires GNU awk to build and expects the 'awk' found on the path
to be GNU awk. If this is not the case, you will need to install GNU awk either
from source (http://www.gnu.org/s/gawk/), Sunfree (http://www.sunfreeware.com).
You may also need to modify the 'PATH' enivronment variable to get scons to see
the right version, i.e.:

$> PATH=/path/to/awk:$PATH scons tests

KNOWN ISSUES
-	If the publisher provides the same unique identifier for multiple different records, the subscriber may lose records.
-	Journal resume handling in live mode may temporarily result in outdated records being transferred.
-	Digest queuing controls (pending_digest_max, pending_digest_timeout) in jald.cfg and jal_subscribe.cfg are not implemented and have no effect.
-	Under high record volume, repeated interruption of the subscriber with Ctrl-C can cause the publisher to no longer accept connections from that client.
-	When adding log or audits to the local store that greatly exceed the size limit of 200MB, the local store can fail to output a console message that records have been rejected.
-	If a subscriber tries to connect without TLS, to a publisher using TLS, the subscriber will display a thread exited message, but will not close until it times out, or a ctrl-c is pressed.


NOTES
  Due to the method in which the JALoP implementation allocates memory for
  records and possible system limitations, large files should be sent as
  journals and passed by file descriptor (i.e. using the jalp_journal_fd()
  function).

  Whenever a process crashes, or returns the error to run DB_RECOVER, stop all
  processes with access to the DB in question, run db_recover, and then restart
  the processes.

  The Berkeley DB database can be tailored to the user's load requirements
  by adding a DB_CONFIG file, with configuration options, to the directory where
  the database is to be created.

  Example DB_CONFIG:

  set_lk_max_locks    400000
  set_lk_max_lockers  400000
  set_lg_regionmax    400000
  set_tx_max          400000
  set_cachesize 1 0 4

  # The following two mutex config lines must be commented out for RHEL5, 
  # or the database context will fail to initialize.
  mutex_set_max       400000
  mutex_set_increment 400000

  A sample DB_CONFIG file is provided within the test-input directory.

  Before running the local store or either of the network stores, the directory
  that is to contain the database should be created and the sample DB_CONFIG file
  should be placed within it.

  http://docs.oracle.com/cd/E17076_02/html/programmer_reference/env_db_config.html

  Berkeley DB tools must be used to periodically checkpoint and archive DB log files, to prevent the database files from filling the available disk space.

  http://docs.oracle.com/cd/E17275_01/html/api_reference/C/db_checkpoint.html
  http://docs.oracle.com/cd/E17275_01/html/api_reference/C/db_archive.html