import os
import string
Import('*')

tests = []

testEnv = env.Clone()
# The test-dept macros trigger this warning, so disable it for all the test
# drivers.
testEnv.Append(CCFLAGS=' -Wno-format-nonliteral -Wno-unreachable-code -DSCHEMAS_ROOT=\\"' + testEnv['SOURCE_ROOT'] + '/schemas/\\" -DTEST_INPUT_ROOT=\\"' + testEnv['SOURCE_ROOT'] + '/test-input/\\" ')
testEnv.Append(CPPPATH=":#/src/test_utils/src")

# this is needed for the jalp_config_internal.h.
# this completes to "debug/src/producer_lib/src"
env.Append(CPPPATH='../../../src')

paramObj = env.SharedObject(os.path.join('..','src', 'jalp_param.c'))
transformObj = env.SharedObject(os.path.join('..','src', 'jalp_transform.c'))
contentTypeObj = env.SharedObject(os.path.join('..', 'src', 'jalp_content_type.c'));
contentTypeXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_content_type_xml.cpp'));
connectionObj = env.SharedObject(os.path.join('..', 'src', 'jalp_connection.c'));
fileInfoObj = env.SharedObject(os.path.join('..', 'src', 'jalp_file_info.c'));
logSeverityObj = env.SharedObject(os.path.join('..', 'src', 'jalp_log_severity.c'))
jalopInitObj = env.SharedObject(os.path.join('..','src', 'jalp_init.cpp'))
base64Obj = env.SharedObject(os.path.join('..','src', 'jalp_base64.c'))
xmlUtilsObj = env.SharedObject(os.path.join('..', 'src', 'jal_xml_utils.cpp'));
logMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_logger_metadata.c'));
appMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_app_metadata.c'));
appMetaXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_app_metadata_xml.cpp'));
structDataObj = env.SharedObject(os.path.join('..', 'src', 'jalp_structured_data.c'))
stackFrameObj = env.SharedObject(os.path.join('..', 'src', 'jalp_stack_frame.c'))
paramXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_param_xml.cpp'))
structDataXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_structured_data_xml.cpp'))
syslogMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_syslog_metadata.c'))
syslogMetaXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_syslog_metadata_xml.cpp'))
journalObj = env.SharedObject(os.path.join('..', 'src', 'jalp_journal.cpp'))
journalMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_journal_metadata.c'))
journalMetaXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_journal_metadata_xml.cpp'))
loggerMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_logger_metadata.c'))
loggerMetaXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_logger_metadata_xml.cpp'))
contextObj = env.SharedObject(os.path.join('..', 'src', 'jalp_context.c'))
fileInfoXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_file_info_xml.cpp'))
transformXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_transform_xml.cpp'))
severityXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_log_severity_xml.cpp'))
stackFrameXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_stack_frame_xml.cpp'))
structDataXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_structured_data_xml.cpp'))
digestAuditXmlObj = env.SharedObject(os.path.join('..', 'src', 'jalp_digest_audit_xml.cpp'))
contextCryptoObj = env.SharedObject(os.path.join('..', 'src', 'jalp_context_crypto.c'))
digestObj = env.SharedObject(os.path.join('..', 'src', 'jalp_digest.c'))
sendHelperObj = env.SharedObject(os.path.join('..', 'src', 'jalp_send_helper.cpp'))

tests.append(testEnv.TestDeptTest('test_jalp_log_severity.c',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_param.c',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_structured_data.c',
	other_sources=[lib_common, paramObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_stack_frame.c',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_transform.c',
	other_sources=[lib_common, base64Obj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_content_type.c',
	other_sources=[paramObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_file_info.c',
	other_sources=[paramObj, contentTypeObj, lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jalp_journal_metadata.c',
	other_sources=[transformObj, fileInfoObj, contentTypeObj, paramObj, lib_common, base64Obj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_init.cpp',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_base64.c',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_log_severity_xml.cpp',
	other_sources=[paramObj, logSeverityObj, jalopInitObj, test_utils, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_logger_metadata.c',
	other_sources=[paramObj, logSeverityObj, structDataObj, stackFrameObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_syslog_metadata.c',
	other_sources=[paramObj, structDataObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_context.c',
	other_sources=[lib_common], useProxies=True)[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_param_xml.cpp',
	other_sources=[paramObj, jalopInitObj, test_utils, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_structured_data_xml.cpp',
	other_sources=[paramObj, jalopInitObj, test_utils, paramXmlObj, structDataObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_stack_frame_xml.cpp',
	other_sources=[stackFrameObj, jalopInitObj, test_utils, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_app_metadata.c',
	other_sources=[lib_common, syslogMetaObj, logMetaObj, journalMetaObj, structDataObj,
	logSeverityObj, stackFrameObj, paramObj, fileInfoObj, transformObj, contentTypeObj,
	base64Obj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_content_type_xml.cpp',
	other_sources=[paramObj, jalopInitObj, test_utils, paramXmlObj, contentTypeObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jal_xml_utils.cpp',
	other_sources=[base64Obj, jalopInitObj, test_utils, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_file_info_xml.cpp',
	other_sources=[jalopInitObj, test_utils, lib_common, contentTypeXmlObj,
	paramXmlObj, fileInfoObj, contentTypeObj, paramObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_transform_xml.cpp',
	other_sources=[transformObj, test_utils, jalopInitObj, base64Obj,
	lib_common, xmlUtilsObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_context_crypto.c',
	other_sources=[lib_common, jalopInitObj, contextObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_syslog_metadata_xml.cpp',
	other_sources=[paramObj, jalopInitObj, base64Obj, xmlUtilsObj, test_utils, paramXmlObj,
	structDataXmlObj, structDataObj, contextObj, syslogMetaObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_digest.c',
	other_sources=[lib_common], useProxies=True)[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_journal_metadata_xml.cpp',
	other_sources=[jalopInitObj, test_utils, contextObj, xmlUtilsObj,
		lib_common, base64Obj,
		paramObj, paramXmlObj, structDataObj, structDataXmlObj,
		fileInfoObj, fileInfoXmlObj, transformObj, transformXmlObj,
		contentTypeObj, contentTypeXmlObj,
		journalMetaObj,
		])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_logger_metadata_xml.cpp',
	other_sources=[base64Obj, xmlUtilsObj, paramXmlObj, structDataXmlObj, stackFrameXmlObj,
	severityXmlObj, contextObj, loggerMetaObj, paramObj, logSeverityObj, structDataObj, stackFrameObj,
	jalopInitObj, test_utils, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_digest_audit_xml.c',
	other_sources=[base64Obj, xmlUtilsObj, lib_common, jalopInitObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_logger.cpp',
	other_sources=[
		appMetaObj, appMetaXmlObj, base64Obj, contentTypeObj, contentTypeXmlObj,
		contextObj, contextCryptoObj, digestObj, fileInfoObj, fileInfoXmlObj, jalopInitObj,
		journalMetaObj, journalMetaXmlObj, lib_common, loggerMetaObj,
		loggerMetaXmlObj, logSeverityObj, paramObj, paramXmlObj, sendHelperObj,
		severityXmlObj, stackFrameObj, stackFrameXmlObj, structDataObj,
		structDataXmlObj, syslogMetaObj, syslogMetaXmlObj, transformObj,
		transformXmlObj, test_utils, xmlUtilsObj])[0].abspath)

tests.append(testEnv.TestDeptTest('test_jalp_app_metadata_xml.cpp',
	other_sources=[jalopInitObj, test_utils, contextObj, xmlUtilsObj,
		lib_common, base64Obj, appMetaObj,
		paramObj, paramXmlObj, structDataObj, structDataXmlObj,
		fileInfoObj, fileInfoXmlObj, transformObj, transformXmlObj,
		contentTypeObj, contentTypeXmlObj,
		journalMetaObj, journalMetaXmlObj,
		syslogMetaObj, syslogMetaXmlObj,
		loggerMetaObj, loggerMetaXmlObj,
		logSeverityObj, severityXmlObj,
		stackFrameObj, stackFrameXmlObj,
		])[0].abspath)

tests.append(testEnv.TestDeptTest('test_jalp_audit.cpp',
	other_sources=[jalopInitObj, test_utils, contextObj, xmlUtilsObj,
		lib_common, base64Obj, contextCryptoObj,
		paramObj, paramXmlObj, structDataObj, structDataXmlObj,
		fileInfoObj, fileInfoXmlObj, transformObj, transformXmlObj,
		contentTypeObj, contentTypeXmlObj,
		journalMetaObj, journalMetaXmlObj,
		syslogMetaObj, syslogMetaXmlObj,
		loggerMetaObj, loggerMetaXmlObj,
		logSeverityObj, severityXmlObj,
		stackFrameObj, stackFrameXmlObj,
		appMetaObj, appMetaXmlObj,
		digestAuditXmlObj
		])[0].abspath)

tests.append(testEnv.TestDeptTest('test_jalp_journal.cpp',
	other_sources=[jalopInitObj, test_utils, contextObj, xmlUtilsObj,
		lib_common, base64Obj, contextCryptoObj,
		paramObj, paramXmlObj, structDataObj, structDataXmlObj,
		fileInfoObj, fileInfoXmlObj, transformObj, transformXmlObj,
		contentTypeObj, contentTypeXmlObj,
		journalMetaObj, journalMetaXmlObj,
		syslogMetaObj, syslogMetaXmlObj,
		loggerMetaObj, loggerMetaXmlObj,
		logSeverityObj, sendHelperObj, severityXmlObj,
		stackFrameObj, stackFrameXmlObj,
		appMetaObj, appMetaXmlObj,
		digestObj])[0].abspath)



tests.insert(0, testEnv.TestDeptTest('test_jalp_connection.c', [contextObj, lib_common], useProxies=True)[0].abspath)

producer_tests = env.Alias('producer_tests', tests, 'test_dept ' + " ".join(tests))
AlwaysBuild(producer_tests)
env.Depends(all_tests, producer_tests)

