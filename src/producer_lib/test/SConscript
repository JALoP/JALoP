import os
import string
Import('*')

tests = []

testEnv = env.Clone()
# The test-dept macros trigger this warning, so disable it for all the test
# drivers.
testEnv.Append(CCFLAGS=' -Wno-format-nonliteral -Wno-unreachable-code -DSCHEMAS_ROOT=\\"' + testEnv['SOURCE_ROOT'] + '/schemas/\\"')

paramObj = env.SharedObject(os.path.join('..','src', 'jalp_param.c'))
transformObj = env.SharedObject(os.path.join('..','src', 'jalp_transform.c'))
contentTypeObj = env.SharedObject(os.path.join('..', 'src', 'jalp_content_type.c'));
fileInfoObj = env.SharedObject(os.path.join('..', 'src', 'jalp_file_info.c'));
logSeverityObj = env.SharedObject(os.path.join('..', 'src', 'jalp_log_severity.c'))
jalopInitObj = env.SharedObject(os.path.join('..','src', 'jalp_init.cpp'))
base64Obj = env.SharedObject(os.path.join('..','src', 'jalp_base64.c'))
xmlTestUtilsObj = testEnv.SharedObject("xml_test_utils.cpp");
logMetaObj = env.SharedObject(os.path.join('..', 'src', 'jalp_logger_metadata.c'));
structDataObj = env.SharedObject(os.path.join('..', 'src', 'jalp_structured_data.c'))
stackFrameObj = env.SharedObject(os.path.join('..', 'src', 'jalp_stack_frame.c'))

tests.append(testEnv.TestDeptTest('test_jalp_log_severity.c', 
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_param.c', 
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_structured_data.c',
	other_sources=[lib_common, paramObj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_stack_frame.c', 
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_transform.c',
	other_sources=[lib_common, base64Obj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_content_type.c',
	other_sources=[paramObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_file_info.c',
	other_sources=[paramObj, contentTypeObj, lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jalp_journal_metadata.c', 
	other_sources=[transformObj, fileInfoObj, contentTypeObj, paramObj, lib_common, base64Obj])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_init.cpp',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_base64.c',
	other_sources=[lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_log_severity_xml.cpp',
	other_sources=[paramObj, logSeverityObj, jalopInitObj, xmlTestUtilsObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_logger_metadata.c',
	other_sources=[paramObj, logSeverityObj, structDataObj, stackFrameObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_syslog_metadata.c',
	other_sources=[paramObj, structDataObj, lib_common])[0].abspath)
tests.append(testEnv.TestDeptTest('test_jalp_context.c',
	other_sources=[lib_common], useProxies=True)[0].abspath)

producer_tests = env.Alias('producer_tests', tests, 'test_dept ' + " ".join(tests))
AlwaysBuild(producer_tests)
env.Depends(all_tests, producer_tests)

