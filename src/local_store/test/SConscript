import os
import string
Import('*')

env = env.Clone()

tests = []

# The test code triggers warnings we'd just as soon ignore
ccflags = ' -Wno-format-nonliteral -Wno-unreachable-code -DSCHEMAS_ROOT=\\"' + env['SOURCE_ROOT'] + '/schemas/\\" -DTEST_INPUT_ROOT=\\"' + env['SOURCE_ROOT'] + '/test-input/\\" '

env.Append(RPATH=os.path.dirname(str(lib_common[0])))
env.Append(CCFLAGS=ccflags.split())
env.MergeFlags({'CPPPATH':['#src/local_store/src', '#src/lib_common/src', '#src/test_utils/src']})

jallsInitObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_init.cpp'))
jallsMsgObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_msg.c'))
jallsHandlerObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_handler.c'))
jallsHandleLogObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_handle_log.cpp'))
jallsHandleAuditObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_handle_audit.cpp'))
jallsHandleJournalObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_handle_journal.cpp'))
jallsHandleJournalFDObj = ls_env.SharedObject(os.path.join('..', 'src', 'jalls_handle_journal_fd.cpp'))

tests.append(env.TestDeptTest('test_jalls_msg.c',
	other_sources=[], useProxies=True)[0].abspath)

tests.append(env.TestDeptTest('test_jalls_handler.c',
	other_sources=[jallsInitObj, jallsMsgObj, jallsHandleJournalObj,
		jallsHandleLogObj, jallsHandleAuditObj, jallsHandleJournalFDObj, lib_common, db_layer],
	useProxies=True)[0].abspath)

local_store_tests = env.Alias('local_store_tests', tests, 'test_dept ' + " ".join(tests))

AlwaysBuild(local_store_tests)

env.Depends(all_tests, local_store_tests)
