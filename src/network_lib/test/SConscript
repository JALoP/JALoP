import os
import string
Import('*')

tests = []

env = env.Clone()

# The test code trigger warnings we'd just assume ignore.
ccflags = ' -Wno-format-nonliteral -Wno-unreachable-code '
env.Append(CCFLAGS=ccflags.split())

ch_info_obj = net_lib_env.SharedObject("../src/jaln_channel_info.c")
cmp_obj = net_lib_env.SharedObject("../src/jaln_compression.c")
conn_cb_obj = net_lib_env.SharedObject("../src/jaln_connection_callbacks.c")
conn_obj = net_lib_env.SharedObject("../src/jaln_connection.c")
ctx_obj = net_lib_env.SharedObject("../src/jaln_context.c")
dgst_obj = net_lib_env.SharedObject("../src/jaln_digest.c")
dgst_info_obj = net_lib_env.SharedObject("../src/jaln_digest_info.c")
dgst_resp_info_obj = net_lib_env.SharedObject("../src/jaln_digest_resp_info.c")
hlpr_obj = net_lib_env.SharedObject("../src/jaln_message_helpers.c")
pub_cb_obj = net_lib_env.SharedObject("../src/jaln_publisher_callbacks.c")
publisher_obj = net_lib_env.SharedObject("../src/jaln_publisher.c")
pub_feeder_obj = net_lib_env.SharedObject("../src/jaln_pub_feeder.c")
rec_info_obj = net_lib_env.SharedObject("../src/jaln_record_info.c")
sess_obj = net_lib_env.SharedObject("../src/jaln_session.c")
str_utils_obj = net_lib_env.SharedObject("../src/jaln_string_utils.c")
tls_obj = net_lib_env.SharedObject("../src/jaln_tls.c")
subscriber_objs = [
	lib_common,
	network_lib,
	net_lib_env.SharedObject("test_jal_subscribe_utils.cpp")
	]

tests.append(env.TestDeptTest('test_jaln_publisher_callbacks.c',
	other_sources=[lib_common,
		ch_info_obj, conn_cb_obj, conn_obj, ctx_obj, dgst_obj, dgst_info_obj,
		dgst_resp_info_obj,
		cmp_obj, hlpr_obj, publisher_obj,
		pub_feeder_obj, rec_info_obj, sess_obj,
		str_utils_obj])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_compression.c',
	other_sources=[lib_common,
		ch_info_obj, conn_cb_obj, conn_obj, ctx_obj, dgst_obj, dgst_info_obj,
		dgst_resp_info_obj,
		hlpr_obj, publisher_obj,
		pub_cb_obj, pub_feeder_obj, rec_info_obj, sess_obj,
		str_utils_obj])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_connection_callbacks.c',
	other_sources=[lib_common,
		ch_info_obj, cmp_obj, conn_obj, ctx_obj, dgst_obj, dgst_info_obj,
		dgst_resp_info_obj, hlpr_obj,
		publisher_obj, pub_cb_obj, pub_feeder_obj, rec_info_obj, sess_obj,
		str_utils_obj])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_context.c',
	other_sources=[lib_common,
		ch_info_obj, cmp_obj, conn_cb_obj, conn_obj, dgst_obj,
		dgst_info_obj, dgst_resp_info_obj, hlpr_obj,
		publisher_obj, pub_cb_obj, pub_feeder_obj, rec_info_obj, sess_obj,
		str_utils_obj])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_digest.c',
	other_sources=[lib_common,
		ch_info_obj, cmp_obj, conn_cb_obj, conn_obj, ctx_obj,
		dgst_info_obj, dgst_resp_info_obj, hlpr_obj,
		publisher_obj, pub_cb_obj, pub_feeder_obj, rec_info_obj, sess_obj,
		str_utils_obj])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_message_helpers.c',
	other_sources=[lib_common,
		ch_info_obj, conn_cb_obj, conn_obj, ctx_obj, dgst_info_obj,
		dgst_resp_info_obj,
		publisher_obj, pub_cb_obj, rec_info_obj,
		sess_obj, str_utils_obj], useProxies=True)[0].abspath)
tests.append(env.TestDeptTest('test_jaln_channel_info.c',
	other_sources=[lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jaln_digest_info.c', other_sources=[lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jaln_digest_resp_info.c', other_sources=[lib_common])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_string_utils.c',
	other_sources=[lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jaln_record_info.c',
	other_sources=[lib_common])[0].abspath)
tests.append(env.TestDeptTest('test_jaln_digest_resp_info.c', other_sources=[lib_common])[0].abspath)

tests.append(env.TestDeptTest('test_jaln_session.c',
	other_sources=[lib_common,
		ch_info_obj, cmp_obj, conn_cb_obj, conn_obj, ctx_obj, dgst_obj,
		dgst_info_obj, dgst_resp_info_obj,
		hlpr_obj, publisher_obj,
		pub_cb_obj, pub_feeder_obj, rec_info_obj,
		str_utils_obj], useProxies=True)[0].abspath)

tests.append(env.TestDeptTest('test_jaln_connection.c',
	other_sources=[lib_common, sess_obj,
		ch_info_obj, cmp_obj, conn_cb_obj, ctx_obj, dgst_obj,
		dgst_info_obj, dgst_resp_info_obj,
		hlpr_obj, publisher_obj,
		pub_cb_obj, pub_feeder_obj, rec_info_obj,
		str_utils_obj], useProxies=True)[0].abspath)

tests.append(env.TestDeptTest('test_jaln_pub_feeder.c',
	other_sources=[lib_common,
		ch_info_obj, cmp_obj, conn_cb_obj, conn_obj, ctx_obj, dgst_obj,
		dgst_info_obj, dgst_resp_info_obj,
		hlpr_obj, publisher_obj,
		pub_cb_obj, rec_info_obj, sess_obj, str_utils_obj],
	useProxies=True)[0].abspath)

tests.append(env.TestDeptTest('test_jaln_publisher.c',
	other_sources=[lib_common, ch_info_obj, cmp_obj, conn_cb_obj, conn_obj,
		ctx_obj, dgst_info_obj, dgst_resp_info_obj,
		dgst_obj, hlpr_obj,
		pub_cb_obj, pub_feeder_obj, rec_info_obj,
		sess_obj, str_utils_obj],
		useProxies=True)[0].abspath)

cppTestsEnv = env.Clone()
cppTestsEnv.Append(CXXFLAGS = '-std=c++17')
cppTestsEnv.Append(LIBS = 'stdc++fs')
tests.append(cppTestsEnv.TestDeptTest('test_jal_subscribe.cpp',
	other_sources=[subscriber_objs], pathPrefix='subscriber',
	skip_associated_source=True)[0].abspath)

net_lib_tests = env.Alias('net_lib_tests', tests, 'test_dept ' + " ".join(tests))
AlwaysBuild(net_lib_tests)
env.Depends(all_tests, net_lib_tests)

