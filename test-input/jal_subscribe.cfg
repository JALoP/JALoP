# If true, utilize tls encryption and authentication
enable_tls = true

# The path to the private key, used for TLS.
private_key = "./test-input/TLS_CA_Signed/server/jal_subscriber_v2_server.key.pem";

# The path to the public cert, used for TLS.
public_cert = "./test-input/TLS_CA_Signed/server/jal_subscriber_v2_server.cert.pem";

# File containing all certificates for remote peers concatenated together.
trust_store = "./test-input/TLS_CA_Signed/server/trust_store_dir/jal_subscriber_v2_server.trusted_certs";

# JalSubscribe v2, Subject to Change
# The path to the root of the database.
db_root = "./subdb";

# The port to listen on for incoming connections
port = 1234;

# The IPv4 hostname or address to bind the http server to for incoming connections.
address = "127.0.0.1";

# The supported record types.
record_type = [ "audit", "log", "journal" ];

# Allowed mode (archive/archival or live)
mode = "archive";

# Max number of sessions before the least-recently-active session is removed
session_limit = 100;

# The timeout to set before an http transaction times out  0 means no timeout
# This timeout only affects a single connection - e.g. time between POST packets when
# transferring a large journal payload. If reached, the session associated with that
# exchange will be closed
network_timeout = 0;

# The maximum size in bytes of the RAM buffer used to process incoming records.
# If a record payload exceeds this size, it will be dumped to the filesystem during receipt
# and processed in bufferSize chunks.
# A high value here puts more demand on system memory, but can improve performance considerably by
# eliminating use of disk.
# A low value will result in more record payloads being written to disk.
# Each session (probably 3 per producer in most cases) may simultaneously consume up to bufferSize memory
# for processing record data.
# NOTE: This applies only to generic message handling. A specific db interface
# (BerkeleyDB for audit and log types for instance) may not respect this setting
buffer_size = 4096;

# A list of supported digest algorithms. These algorithms should be in a single double-quoted string with a space separating the algorithms.
# Valid values are "sha256", "sha384", and "sha512"
digest_algorithms = "sha256";

# The database format with which to store received records
# Valid values are "bdb" and "fs"
database_type = "bdb";

# seccomp will restrict the jal-local-store process to the defined system calls.
# When the process is in the setup phase, at startup, it will be restricted to the
# initial_seccomp_rules, both_seccomp_rules and final_seccomp_rules system call sets. After the setup phase and before the process
# is doing its routine work, it will be further restricted to only the both_seccomp_rules and final_seccomp_rules system call set.
#
enable_seccomp = true;
seccomp_debug = false;
seccomp_strace_mode = false;
#added ["getdents64","getsockopt","select","flock","getpid","getsockname"] for RHEL 8
initial_seccomp_rules = ["getdents64","getsockopt","select","flock","getpid","getsockname","prctl","seccomp","arch_prctl","bind","brk","execve","getdents","getrlimit","getrusage","ioctl","listen","set_tid_address","socket","statfs"]
both_seccomp_rules = ["access","clone","close","fcntl","fdatasync","fstat","futex","lseek","mkdir","mmap","mprotect","munmap","open","openat","poll","pread64","pwrite64","read","rename","rt_sigaction","rt_sigprocmask","set_robust_list","setsockopt","stat","write"]
final_seccomp_rules = ["accept4","clock_gettime","exit","exit_group","ftruncate","madvise","nanosleep","recvfrom","rt_sigreturn","sched_yield","sendto","shutdown","unlink","writev"]

# For http server implementations which support thread pools (such as libmicrohttpd)
# Set the size of the thread pool
# 9 is sufficient for 3 fully connected publishers to be handled concurrently, and is a safe starting point
http_server_thread_pool_size = 9;
