# The path to a PEM formatted private key that jal-local-store
# will use to sign all system metadata documents. This is optional.
private_key_file = "./test-input/TLS_CA_Signed/local-store/rsa_key";

# The path to a PEM formatted certificate file that jal-local-store
# will append to the system metadata document. This is optional.
public_cert_file = "./test-input/TLS_CA_Signed/local-store/cert";

# A UUID in the form "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" where each 'x' is a
# hexadecimal character (0-9a-fA-F). jal-local-store
# will include this in the system metadata document as the HostUUID element.
# This is required.
system_uuid = "34c90268-57ba-4d4c-a602-bdb30251ec77";

# A friendly name to identify the host. This is added to the system metadata as
# the Hostname element. This is optional, jal-local-store
# will generate a hostname if it is not included in the configuration file.
hostname = "test.jalop.com";

# This identifies where jal-local-store should store all the records. 
# This is optional and defaults to /var/lib/jalop/db/ .
db_root = "./testdb";

# The full path to the JALoP schemas. This is optional.
schemas_root = "./schemas/";

# The jal-local-store process, at startup, will check if it is
# running under systemd along with a systemd socket unit file configuration.
# If so, there is no need to define any socket parameters below, they will be ignored.
# Systemd will create the socket file for jal-local-store. 
#
# If there is no systemd socket, jal-local-store will attempt to create it.
# Enter the file system path where the socket file will be created
# socket_owner and socket_group will default to the user and group
# the jal-local-store process is running as and socket mode will default to 0666.
socket = "./jal.sock"; 

# Uncomment to define a socket_owner other then the default (the user the process is running as)
# The username used must exist on the system.
#socket_owner = "jalls";

# Uncomment to define a socket_group other then the default (the group the process user belongs to).
# The groupname used must exist on the system.
#socket_group = "jalproducer";

# Uncomment to define socket_mode other then the default (0666).
# This must be a string representing exactly 4 digits.
# Each digit must be in the range of 0-7.
#socket_mode = "0420";

# example socket file listing after being created
# sr--w----.  1 jalls jalproducer  0 Jan 23 13:15 /var/run/jalop/jal.sock

# run db_recover before opening the DB
db_recover = false;

# Process will cd to / (root directory),fork, and will run as a daemon.
# When running the process as daemon, and even though the jal-local-store 
# will resolve relative paths for you, it is always safer to use 
# absolute paths for configurations in this file that require file system paths. 
daemon = true;

sign_sys_meta = false;

manifest_sys_meta = false;

# Flow control functionality turned off if accept_delay_thread_count set to zero.
# Below are the default values if not set.
#accept_delay_thread_count = 10;
#accept_delay_increment = 100;
#accept_delay_max = 10000000;

# File storing PID of jal-local-store when daemonized.
#pid_file = "/var/log/jalop/jls-pid.txt";

# Log directory of jal-local-store when daemonized.
log_dir = ".";

# seccomp will restrict the jal-local-store process to the defined system calls.
# When the process is in the setup phase, at startup, it will be restricted to the
# initial_seccomp_rules and final_seccomp_rules system call sets. After the setup phase and before the process
# is doing its routine work, it will be further restricted to only the final_seccomp_rules system call set.
#
enable_seccomp = false;
seccomp_debug = false;
# this rule will restrict the process from setting flags on a file
restrict_seccomp_F_SETFL = true;
initial_seccomp_rules = ["geteuid","getgid","capget","capset","chmod","chown","arch_prctl","bind","brk","chdir","dup2","execve","flock","getcwd","getdents","getdents64","getrlimit","ioctl","listen","lstat","poll","prctl","prlimit64","rename","rt_sigaction","rt_sigprocmask","seccomp","select","set_tid_address","setsid","statfs","sysinfo"];
final_seccomp_rules = ["sched_yield","accept","access","brk","clone","close","connect","exit","exit_group","fcntl","fdatasync","fstat","futex","getpid","getppid","getrandom","getsockopt","gettid","getuid","lseek","madvise","mkdir","mmap","mprotect","munmap","open","openat","pread64","pwrite64","read","recvmsg","rt_sigreturn","set_robust_list","socket","stat","unlink","write"];

