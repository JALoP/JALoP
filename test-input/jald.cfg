# the path to the private key, used for TLS negotiation
#private_key = "./test-input/TLS_CA_Signed/client/jal_publisher_v2_client.key.pem";
private_key = "./test-input/TLS_Self_Signed/pub_key.pem";

# the path to the public cert, used for TLS negotiation
#public_cert = "./test-input/TLS_CA_Signed/client/jal_publisher_v2_client.cert.pem";
public_cert = "./test-input/TLS_Self_Signed/pub_cert.pem";

# UUID used to identify this publisher
publisher_id = "cc0191c2-97e8-4cbf-af13-920d268d68ec";

# time in seconds between checks for new records when none are available
poll_time = 1L;

# time in seconds between attempts to reconnect to peers where the connection has closed
# the special value of -1 can be used to indicated that jald should not attempt reconnects
retry_interval = 30L;

# Network timeout for each session, in minutes. Upon failure to send or receive
# data in this time, a network outage is assumed and the session closes.
# The special value of 0 implies not network timeout is enforced.
network_timeout = 60;

# path to the root of the database (optional)
db_root = "./testdb";

# path to a directory containing the JALoP schemas (optional)
schemas_root = "./schemas/";

# file storing PID of jald when daemonized.
#pid_file = "/var/log/jalop/jald-pid.txt";

# Log directory of jald when daemonized.
log_dir = "./";

# List of subscriber configurations.
peers = ( {
	# the hostname or IP address of the subscriber
	host = "192.168.137.130";
	# the port to connect to
	port = 8444L;
	# the mode of JALoP operation
	mode = "archive";
	# array of digest challenge configuration settings ordered by descending priority
	digest_challenge = ["on"];
	# array of record types to be sent to the subscriber
	record_types = ["audit", "log", "journal"];
	# directory containing the CA certificate(s) to use for TLS negotiation
	#cert_dir = "./test-input/TLS_CA_Signed/client/trust_store_dir";
	cert_dir = "./test-input/TLS_Self_Signed";
	} );

# seccomp will restrict the process to the defined system calls.
# When the process is in the setup phase, at startup, it will be restricted to the
# initial_seccomp_rules, both_seccomp_rules and final_seccomp_rules system call sets. After the setup phase and before the process
# is doing its routine work, it will be further restricted to only the both_seccomp_rules and final_seccomp_rules system call set.
#
enable_seccomp = false;
seccomp_debug = false;
initial_seccomp_rules = ["prctl","access","arch_prctl","execve","getcwd","getrlimit","ioctl","lstat","set_tid_address","seccomp","statfs"]
both_seccomp_rules = ["brk","close","fstat","lseek","mmap","mprotect","munmap","open","read","rt_sigaction","rt_sigprocmask","set_robust_list","stat","write"]
final_seccomp_rules = ["flock","setsockopt","getpid","clone","connect","exit","exit_group","fcntl","fdatasync","ftruncate","futex","getdents","getpeername","getsockname","getsockopt","gettid","madvise","nanosleep","openat","poll","pread64","pwrite64","recvfrom","rename","rt_sigreturn","sched_yield","sendto","socket"]
